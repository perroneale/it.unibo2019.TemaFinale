/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "so"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("so") { //this:State
					action { //it:State
						println("Butler STARTED")
					}
					 transition( edgeName="goto",targetState="waitCmd1", cond=doswitch() )
				}	 
				state("waitCmd1") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="preparing",cond=whenDispatch("prepare"))
				}	 
				state("preparing") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("mi reco alla pantry")
						delay(2000) 
						forward("takeDishesP", "takeDishesP(D,P,B)" ,"pantry" ) 
						println("mi reco al tavolo")
						delay(2000) 
						println("mi reco al frigo")
						delay(2000) 
						forward("takeFood", "takeFood(1,2)" ,"fridge" ) 
						println("mi reco al tavolo")
						delay(2000) 
						println("torno nella posizione RH")
						delay(2000) 
						forward("completedTask", "completedTask(prepare)" ,"maitre" ) 
						forward("terminatedTask", "terminatedTask(prepare)" ,"butler" ) 
					}
					 transition(edgeName="t01",targetState="waitCmd2",cond=whenDispatch("terminatedTask"))
					transition(edgeName="t02",targetState="stopApplicationP",cond=whenDispatch("stop"))
				}	 
				state("waitCmd2") { //this:State
					action { //it:State
					}
					 transition(edgeName="t03",targetState="adding",cond=whenDispatch("addFood"))
					transition(edgeName="t04",targetState="cleaning",cond=whenDispatch("clear"))
				}	 
				state("stopApplicationP") { //this:State
					action { //it:State
						println("Butler stopping during prepare activity")
					}
					 transition(edgeName="t05",targetState="preparing",cond=whenDispatch("reactivate"))
				}	 
				state("adding") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("completedTask", "completedTask(addFood)" ,"maitre" ) 
						forward("terminatedTask", "terminatedTask" ,"butler" ) 
					}
					 transition(edgeName="t06",targetState="waitCmd2",cond=whenDispatch("terminatedTask"))
					transition(edgeName="t07",targetState="stopApplicationA",cond=whenDispatch("stop"))
				}	 
				state("stopApplicationA") { //this:State
					action { //it:State
						println("Butler stopping during prepare activity")
					}
					 transition(edgeName="t08",targetState="adding",cond=whenDispatch("reactivate"))
				}	 
				state("cleaning") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("mi reco al tavolo")
						delay(2000) 
						println("mi reco alla dishwasher")
						delay(2000) 
						forward("putDishesD", "putDishesD" ,"dishwasher" ) 
						println("mi reco al tavolo e prendo il cibo rimasto")
						delay(2000) 
						println("mi reco al frigo")
						delay(2000) 
						forward("putFood", "putFood(1,1)" ,"fridge" ) 
						println("torno nella posizione RH")
						delay(2000) 
						forward("completedTask", "completedTask(clear)" ,"maitre" ) 
						forward("terminatedTask", "terminatedTask" ,"butler" ) 
					}
					 transition(edgeName="t09",targetState="waitCmd1",cond=whenDispatch("terminatedTask"))
					transition(edgeName="t010",targetState="stopApplicationC",cond=whenDispatch("stop"))
				}	 
				state("stopApplicationC") { //this:State
					action { //it:State
						println("Butler stopping during prepare activity")
					}
					 transition(edgeName="t011",targetState="cleaning",cond=whenDispatch("reactivate"))
				}	 
			}
		}
}
