/* Generated by AN DISI Unibo */ 
package it.unibo.execroute

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Execroute ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Curmove ="";
			  var nextState =""; 
			  var table = 0;
			  var Position = ""; 
			  var PosTable = "";
			  var Task = "";
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("###EXECROUTE STARTED")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t014",targetState="execRoute",cond=whenDispatch("exec"))
				}	 
				state("execRoute") { //this:State
					action { //it:State
						println("###EXECROUTE STATE EXEC ROUTE")
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString()
						println("Exec move $Curmove")
						 }
						else
						{ Curmove="nomove" 
						 }
						if((Curmove != "nomove")){ forward("nextMove", "nextMove" ,"execroute" ) 
						 }
						else
						 { forward("check", "check" ,"execroute" ) 
						  }
					}
					 transition(edgeName="t015",targetState="stopApplication",cond=whenDispatch("stop"))
					transition(edgeName="t016",targetState="execRoute",cond=whenDispatch("nextMove"))
					transition(edgeName="t017",targetState="checkPosition",cond=whenDispatch("check"))
					transition(edgeName="t018",targetState="handleObstacle",cond=whenEvent("sonarRobot"))
				}	 
				state("checkPosition") { //this:State
					action { //it:State
						println("###EXECROUTE in checkPosition")
						solve("currentTask(robot,task(T))","") //set resVar	
						if(currentSolution.isSuccess()) { Task = getCurSol("T").toString()
						println("task = $Task")
						 }
						solve("currentPosition(robot,position(P))","") //set resVar	
						if(currentSolution.isSuccess()) { Position = getCurSol("P").toString()
						 }
						if((Position == "table")){ table++; Position = Position + table
						 }
						else
						 { if((Position == "inRH")){ forward("inRH", "inRH" ,"execroute" ) 
						  }
						 else
						  { forward("near", "near($Position)" ,"execroute" ) 
						   }
						  }
					}
					 transition(edgeName="t019",targetState="execTaskPrepare",cond=whenDispatchGuarded("near",{Task.equals("preparing")}))
					transition(edgeName="t020",targetState="execTaskAdd",cond=whenDispatchGuarded("near",{Task.equals("adding")}))
					transition(edgeName="t021",targetState="execTaskClean",cond=whenDispatchGuarded("near",{Task.equals("cleaning")}))
					transition(edgeName="t022",targetState="sendAck",cond=whenDispatch("inRH"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="execRoute", cond=doswitch() )
				}	 
				state("execTaskPrepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("nearPrepare(X)"), Term.createTerm("nearPrepare(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE takes dishes from pantry")
								forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearPrepare(X)"), Term.createTerm("nearPrepare(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE takes food from fridge")
								forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearPrepare(X)"), Term.createTerm("nearPrepare(table1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE puts dishes on table")
								forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearPrepare(X)"), Term.createTerm("nearPrepare(table2)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE puts food on table")
								forward("calculateRoute", "calculateRoute(rh)" ,"planningroute" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("sendAck") { //this:State
					action { //it:State
						table = 0;
						println("###EXECROUTE finished $Task task")
						forward("completedTask", "completedTask($Task)" ,"maitre" ) 
						forward("completedTask", "completedTask($Task)" ,"butlermind" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("stopApplication") { //this:State
					action { //it:State
						println("###EXECROUTE stopped")
					}
					 transition(edgeName="t023",targetState="execRoute",cond=whenDispatch("reactivate"))
				}	 
				state("execTaskClean") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("nearClean(X)"), Term.createTerm("nearClean(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE puts dishes into dishwasher")
								forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearClean(X)"), Term.createTerm("nearClean(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE puts food into fridge")
								forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearClean(X)"), Term.createTerm("nearClean(table1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE takes dishes from table")
								forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearClean(X)"), Term.createTerm("nearClean(table2)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE takes food from table")
								forward("calculateRoute", "calculateRoute(rh)" ,"planningroute" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("execTaskAdd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("nearAdd(X)"), Term.createTerm("nearAdd(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE takes food from fridge")
								forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						}
						if( checkMsgContent( Term.createTerm("nearAdd(X)"), Term.createTerm("nearAdd(table1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("###EXECROUTE puts food on table")
								forward("calculateRoute", "calculateRoute(rh)" ,"planningroute" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
