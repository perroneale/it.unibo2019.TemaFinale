/* Generated by AN DISI Unibo */ 
package it.unibo.butlermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butlermind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Task = "";
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('resourceModelButler.pl')","") //set resVar	
						println("ButlerMind STARTED")
					}
					 transition( edgeName="goto",targetState="waitCmd1", cond=doswitch() )
				}	 
				state("waitCmd1") { //this:State
					action { //it:State
						Task = "";
						forward("modelChangeTask", "modelChangeTask(robot,waiting)" ,"butlerresourcemodel" ) 
					}
					 transition(edgeName="t07",targetState="preparing",cond=whenEvent("modelChangedpreparing"))
				}	 
				state("preparing") { //this:State
					action { //it:State
						println("---BUTLERMIND in preparing")
						Task = "preparing";
						forward("calculateRoute", "calculateRoute(pantry)" ,"planningroute" ) 
					}
					 transition( edgeName="goto",targetState="waitAck", cond=doswitch() )
				}	 
				state("waitAck") { //this:State
					action { //it:State
						solve("currentTask(robot,task(T))","") //set resVar	
						if(currentSolution.isSuccess()) { Task = getCurSol("T").toString()
						println("task = $Task")
						 }
					}
					 transition(edgeName="t08",targetState="waitCmd2",cond=whenDispatchGuarded("completedTask",{Task.equals("preparing")}))
					transition(edgeName="t09",targetState="waitCmd1",cond=whenDispatchGuarded("completedTask",{Task.equals("cleaning")}))
					transition(edgeName="t010",targetState="waitCmd2",cond=whenDispatchGuarded("completedTask",{Task.equals("adding")}))
				}	 
				state("waitCmd2") { //this:State
					action { //it:State
						Task = "";
						forward("modelChangeTask", "modelChangeTask(robot,waiting)" ,"butlerresourcemodel" ) 
					}
					 transition(edgeName="t011",targetState="adding",cond=whenEvent("modelChangedadding"))
					transition(edgeName="t012",targetState="cleaning",cond=whenEvent("modelChangedcleaning"))
				}	 
				state("cleaning") { //this:State
					action { //it:State
						Task = "cleaning";
						forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
					}
					 transition( edgeName="goto",targetState="waitAck", cond=doswitch() )
				}	 
				state("adding") { //this:State
					action { //it:State
						Task = "adding";
						if( checkMsgContent( Term.createTerm("addFood(C,Q)"), Term.createTerm("addFood(C,Q)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("foodAvailability", "foodAvailability(${payloadArg(0)},${payloadArg(1)})" ,"fridge" ) 
						}
					}
					 transition(edgeName="t013",targetState="nextStep",cond=whenDispatch("positiveResponse"))
					transition(edgeName="t014",targetState="sendWarning",cond=whenDispatch("negativeResponse"))
				}	 
				state("nextStep") { //this:State
					action { //it:State
						forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
					}
					 transition( edgeName="goto",targetState="waitAck", cond=doswitch() )
				}	 
				state("sendWarning") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("negativeResponse(C,Q,AQ)"), Term.createTerm("negativeResponse(C,Q,AQ)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("warning", "warning(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd2", cond=doswitch() )
				}	 
			}
		}
}
