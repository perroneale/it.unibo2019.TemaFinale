/* Generated by AN DISI Unibo */ 
package it.unibo.execroute

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Execroute ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Curmove ="";
			  var nextState =""; 
			  var table = 0;
			  var Position = ""; 
			  var PosTable = "";
			  var Task = "";
			  var Duration = 0
			  var X= ""
			  var Y = ""
			  var ForwardTime = 0
			  var StepTime = 0L
			  var TimeVirtual = 0L
			  var Robot = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("###EXECROUTE STARTED")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('config.pl')","") //set resVar	
						solve("consult('basicRobotConfig.pl')","") //set resVar	
						solve("robot(R,PORT)","") //set resVar	
						Robot = getCurSol("R").toString()
						if((Robot == "virtual")){ solve("timeVirtual(TV)","") //set resVar	
						if(currentSolution.isSuccess()) { ForwardTime = getCurSol("TV").toString().toInt()
						println("ForwardTime")
						 }
						 }
						else
						 { solve("timeForward(TF)","") //set resVar	
						 ForwardTime = getCurSol("TF").toString().toInt()
						 println("ForwardTime")
						  }
						StepTime = ForwardTime.toLong()
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t035",targetState="execRoute",cond=whenDispatch("exec"))
				}	 
				state("execRoute") { //this:State
					action { //it:State
						println("###EXECROUTE STATE EXEC ROUTE")
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString()
						 }
						else
						{ Curmove = "nomove" 
						println("Curmove = $Curmove")
						 }
						if((Curmove != "nomove")){ if(Curmove == "w"){ println("Exec move $Curmove")
						forward("modelChangeAction", "modelChangeAction(robot,$Curmove)" ,"butlerresourcemodel" ) 
						startTimer()
						 }
						else
						 { forward("modelChangeAction", "modelChangeAction(robot,$Curmove)" ,"butlerresourcemodel" ) 
						 delay(2000) 
						 this.scope.launch{
						 				autoMsg("nextMove","nextMove(n)")
						 				}
						  }
						 }
						else
						 { println("*************IN ELSE22")
						 this.scope.launch{
						 				autoMsg("check","check(c)")
						 			}
						  }
						stateTimer = TimerActor("timer_execRoute", 
							scope, context!!, "local_tout_execroute_execRoute", StepTime )
					}
					 transition(edgeName="t036",targetState="testState",cond=whenTimeout("local_tout_execroute_execRoute"))   
					transition(edgeName="t037",targetState="execRouteCompleted",cond=whenDispatch("check"))
					transition(edgeName="t038",targetState="testState",cond=whenDispatch("nextMove"))
					transition(edgeName="t039",targetState="stopApplication",cond=whenEventGuarded("modelChangedstop",{(Curmove =="w")}))
					transition(edgeName="t040",targetState="handleObstacle",cond=whenEvent("obstacleDetected"))
				}	 
				state("execRouteCompleted") { //this:State
					action { //it:State
						println("****EXECROUTE IN execRouteCompleted")
						forward("destinationReached", "destinationReached($X,$Y)" ,"butlermind" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("stopApplication") { //this:State
					action { //it:State
						println("###EXECROUTE stopped")
						forward("modelChangeAction", "modelChangeAction(robot,h)" ,"butlerresourcemodel" ) 
						Duration = getDuration()
					}
					 transition(edgeName="t041",targetState="completeStep",cond=whenEvent("modelChangedreactivate"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("ççççççççççIN HANDLE OBSTACLE StepTime = $StepTime")
						if((Robot == "virtual")){ forward("modelChangeAction", "modelChangeAction(robot,$Curmove)" ,"butlerresourcemodel" ) 
						startTimer()
						 }
						else
						 { currentProcess=machineExec("sudo bash startBuzzer.sh")
						 Duration = getDuration()
						 println("Duration = $Duration")
						 this.scope.launch{
						 				autoMsg("check","check(c)")
						 			}
						  }
						stateTimer = TimerActor("timer_handleObstacle", 
							scope, context!!, "local_tout_execroute_handleObstacle", StepTime )
					}
					 transition(edgeName="t042",targetState="testState",cond=whenTimeout("local_tout_execroute_handleObstacle"))   
					transition(edgeName="t043",targetState="checkObstacle",cond=whenDispatch("check"))
				}	 
				state("testState") { //this:State
					action { //it:State
						println("££££in teststate")
						forward("modelChangeAction", "modelChangeAction(robot,h)" ,"butlerresourcemodel" ) 
						itunibo.planner.moveUtils.doPlannedMove(myself ,Curmove )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						X = itunibo.planner.moveUtils.getPosX(myself).toString()
								  Y = itunibo.planner.moveUtils.getPosY(myself).toString()
						forward("modelChangePos", "modelChangePos(robot,$X,$Y)" ,"butlerresourcemodel" ) 
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="execRoute", cond=doswitch() )
				}	 
				state("checkObstacle") { //this:State
					action { //it:State
						forward("isObstacle", "isObstacle" ,"mind" ) 
					}
					 transition(edgeName="t044",targetState="checkObstacle",cond=whenDispatch("obstacle"))
					transition(edgeName="t045",targetState="completeStep",cond=whenDispatch("notObstacle"))
				}	 
				state("completeStep") { //this:State
					action { //it:State
						var StepTime2 = StepTime - Duration
						println("StepTime2 = $StepTime2")
						currentProcess=machineExec("sudo bash stopBuzzer.sh")
						forward("modelChangeAction", "modelChangeAction(robot,$Curmove)" ,"butlerresourcemodel" ) 
						startTimer()
						stateTimer = TimerActor("timer_completeStep", 
							scope, context!!, "local_tout_execroute_completeStep", StepTime2 )
					}
					 transition(edgeName="t046",targetState="testState",cond=whenTimeout("local_tout_execroute_completeStep"))   
				}	 
			}
		}
}
