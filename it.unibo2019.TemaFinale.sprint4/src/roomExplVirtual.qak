System roomexplvirtual
   
mqttBroker "localhost" : 1883

Dispatch onestep       : onestep(DURATION) 
Dispatch startExplorationVirtual : startExplorationVirtual



Dispatch execOneStep : execOneStep
Dispatch stepFail : stepFail(DURATION)
Dispatch stepOk : stepOk
Dispatch modelChangeAction : modelChangeAction(DEST, ACTION)
Dispatch tableFound : tableFound
Dispatch explore : explore
Dispatch edgeExplorationComplete : edgeExplorationComplete
Dispatch start : start
Dispatch isObstacle : isObstacle
Dispatch notObstacle : notObstacle
Dispatch obstacle : obstacle
Dispatch terminated : terminated
  

Event sonarRobot : sonarRobot(DISTANCE)
Event obstacleDetected : obstacleDetected
Event obstacleExploration : obstacleExploration
Event map : map(MAPSTRING, MAPNAME)
Event explorationCompleted : explorationCompleted

Context ctxRoomExplVirtual ip[host="localhost" port=8087] -mqtt
Context ctxResourceModel ip[host="192.168.43.100" port=8080] -mqtt
    
ExternalQActor mind context ctxResourceModel
ExternalQActor butlerresourcemodel context ctxResourceModel 

QActor onestep context ctxRoomExplVirtual{
	[" 
var foundObstacle = false; 
var StepTime = 0L; 
var Duration=0 
"]    
	State s0 initial {	  
		println("onestepahead STARTED")  
		
	}Goto waitCmd
	
 
 	State waitCmd{
 		["foundObstacle = false "]
 	}Transition t0 whenMsg onestep -> doMoveForward
 	
	State doMoveForward{		
		["storeCurrentMessageForReply()"]  	//TODO: introduce a qak operation
		onMsg( onestep : onestep( TIME ) ) {
			["StepTime = payloadArg(0).toString().toLong()"]   
 			forward butlerresourcemodel -m modelChangeAction : modelChangeAction(robot,w)
	 		["startTimer()"] //startTimer is built-in in the actor
		}      
	}          
	Transition t0 whenTimeVar StepTime  -> endDoMoveForward		
 		          whenEvent obstacleDetected    -> stepFail	   
 		   
	State endDoMoveForward{
		forward butlerresourcemodel -m modelChangeAction : modelChangeAction(robot,h)
		forward roomexplorationvirtual -m stepOk : stepOk  //TODO: introduce a qak operation
	}
	Goto waitCmd
	
	State stepFail{ 
		["Duration=getDuration()"]  //getDuration is built-in in the actor
		println("onestepahead stepFail Duration=$Duration ")
		forward butlerresourcemodel -m modelChangeAction : modelChangeAction(robot, s)
		["Thread.sleep(Duration.toLong())"]
		forward butlerresourcemodel -m modelChangeAction : modelChangeAction(robot, h)
		forward roomexplorationvirtual -m stepFail : stepFail
	}
	Goto waitCmd  
}
  
QActor roomexplorationvirtual context ctxRoomExplVirtual{
	["var RotationCount = 0;
	  var FORWARDTIME = 770;
	  var FORWARDTIME2 = 900;
	  var DimX = 0
	  var DimY = 0
	  var EdgeCounterX = 0
	  var EdgeCounterY = 0
	  var XRobot = 0
	  var YRobot = 0
	  var XRobotFT = 0
	  var YRobotFT = 0
      var ContX = 0
	  var ContY = 0
	  var Obstaclelr = 0
	  var Obstacleup = 0
	  var Direction = \"\"
	  var mapName = \"mappa\"
	  var OBSTACLE = false
	  var explCompleted = false
	  var CurMove = \"\""]
	State s0 initial{
		println("###roomExploration started")
		solve(consult("sysRules.pl"))
		solve(consult("moves.pl"))
		solve(consult("config.pl"))
		solve(timeVirtual(TV))
		ifSolved{
			["FORWARDTIME = getCurSol(\"TV\").toString().toInt()"]
			println("$FORWARDTIME")
		}
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.moveUtils.showCurrentRobotState()
		
	}Goto waitStart
	
	State waitStart{
		
	}Transition t0 whenMsg startExplorationVirtual -> doExploration
	   
	State doExploration{
		onMsg(stepOk : stepOk){
			run itunibo.planner.moveUtils.doPlannedMove(myself, "w")
			run itunibo.planner.moveUtils.showCurrentRobotState()
			delay 2000
		}
		forward onestep -m onestep : onestep($FORWARDTIME)
	}Transition t0 whenMsg stepFail -> wallFound
				   whenMsg stepOk -> doExploration
				   
	State wallFound{
		println("###MURO TROVATO")
		run itunibo.planner.plannerUtil.wallFound()
		run itunibo.planner.moveUtils.rotateLeft(myself)
		["RotationCount ++"]
		println("###Rotation Count = $RotationCount")
		run itunibo.planner.moveUtils.showCurrentRobotState()
	}Goto endBoundary if "(RotationCount >= 4) " else doExploration
	
	State endBoundary{
		println("###BoundaryExplored")
		["DimX = itunibo.planner.moveUtils.getMapDimX( ) 
          DimY = itunibo.planner.moveUtils.getMapDimY( )
		  println(\"DimX : $DimX\")
		  println(\"DimY : $DimY\")"]
	}Goto exploreRoom
	
	State exploreRoom{
		onMsg(stepOk : stepOk){
			run itunibo.planner.moveUtils.doPlannedMove(myself, "w")
		}
		["XRobot = itunibo.planner.moveUtils.getPosX(myself)
		  YRobot = itunibo.planner.moveUtils.getPosY(myself)
		  println(\"Xrobot : $XRobot\")
		  println(\"Yrobot : $YRobot\")"]
		  
		  
		  ["DimX = itunibo.planner.moveUtils.getMapDimX( ) 
          DimY = itunibo.planner.moveUtils.getMapDimY( )
		  println(\"DimX : $DimX\")
		  println(\"DimY : $DimY\")"]
		  
		if"((XRobot == DimX - 2) && (YRobot == DimY -2)) || ((XRobot == 0) && (YRobot == DimY -2))"{
			println("###IN FINE")
			//ho esplorato tutta la stanza e non c'era il tavolo
			forward roomexplorationvirtual -m terminated : terminated
		}else{
			if "(XRobot == 0) && (YRobot == 0)" {
				println("###IN 00")
				run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
				run itunibo.planner.moveUtils.rotateLeft2(myself)
			}else{
				if "(XRobot == 0) && (YRobot > 0)"{
					["ContY = 0"]
					println("###IN 0>")
					run itunibo.planner.moveUtils.rotateLeft2(myself)
					run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
					run itunibo.planner.moveUtils.rotateLeft2(myself)
				}else{
					if "(XRobot == DimX - 2) && (YRobot > 0)"{
						["ContY = 0"]
						println("###-2>")
						run itunibo.planner.moveUtils.rotateRight2(myself)
						run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
						run itunibo.planner.moveUtils.rotateRight2(myself)
					}
				}
			}
			forward onestep -m onestep : onestep($FORWARDTIME)
		}  
		  
	}Transition t0 whenMsg terminated -> explorationDone
				   whenMsg stepFail -> tableFound
			       whenMsg stepOk -> exploreRoom
			       
	State tableFound{
		["Direction = itunibo.planner.moveUtils.getDirection(myself)"]
		run itunibo.planner.moveUtils.showCurrentRobotState()
		["XRobotFT = itunibo.planner.plannerUtil.getPosX()
		  YRobotFT = itunibo.planner.plannerUtil.getPosY()"]
	}Goto leftDir if "Direction.equals(\"leftDir\")" else rightDir
	
	State rightDir{
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		run itunibo.planner.moveUtils.rotateRight2(myself)
		run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
		run itunibo.planner.moveUtils.rotateLeft2(myself)
		forward onestep -m onestep : onestep($FORWARDTIME)
	}Transition t0 whenMsg stepFail -> rightDir
			       whenMsg stepOk -> underTableRd
	  
	State leftDir{  
			run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
			run itunibo.planner.moveUtils.rotateLeft2(myself)
			run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
			run itunibo.planner.moveUtils.rotateRight2(myself)
			forward onestep -m onestep : onestep($FORWARDTIME)
	}Transition t0 whenMsg stepFail -> leftDir
			       whenMsg stepOk -> underTableLd
	
	State underTableLd{
		 onMsg(stepOk : stepOk){
		  	run itunibo.planner.moveUtils.doPlannedMove(myself, "w")
			run itunibo.planner.moveUtils.showCurrentRobotState()
		  }
		["XRobot = itunibo.planner.plannerUtil.getPosX()
		  YRobot = itunibo.planner.plannerUtil.getPosY()"]
		
		if "(XRobot == XRobotFT) && (YRobot == YRobotFT) "{
			println("###FINITO")
			forward roomexplorationvirtual -m terminated : terminated
		}else{
			run itunibo.planner.moveUtils.rotateRight2(myself)
			forward onestep -m onestep : onestep($FORWARDTIME)
		}  
	}Transition t0 whenMsg terminated -> explorationDone
			       whenMsg stepFail -> continueExplLD
			       whenMsg stepOk -> underTableLd
	
	
	State underTableRd{
		  onMsg(stepOk : stepOk){
		  	run itunibo.planner.moveUtils.doPlannedMove(myself, "w")
			run itunibo.planner.moveUtils.showCurrentRobotState()
		  }  
		  ["XRobot = itunibo.planner.plannerUtil.getPosX()
		  YRobot = itunibo.planner.plannerUtil.getPosY()"]
		  if "(XRobot == XRobotFT) && (YRobot == YRobotFT) "{
			println("###FINITO")
			forward roomexplorationvirtual -m terminated : terminated
		}else{
			 run itunibo.planner.moveUtils.rotateLeft2(myself)
		  	 delay 1000
			 forward onestep -m onestep : onestep($FORWARDTIME)
		}   
	}Transition t0 whenMsg terminated -> explorationDone
			       whenMsg stepFail -> continueExplRD
			       whenMsg stepOk -> underTableRd
		 	      
	State continueExplRD{
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		run itunibo.planner.moveUtils.rotateRight2(myself)
		run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
	}Goto underTableRd
	
	State continueExplLD{
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		run itunibo.planner.moveUtils.rotateLeft2(myself)
		run itunibo.planner.moveUtils.moveAhead(myself, FORWARDTIME)
	}Goto underTableLd
	
	State explorationDone{
		println("###EXPLORATION DONE###")
		//run itunibo.planner.moveUtils.saveMap(myself, mapName)
		run itunibo.planner.moveUtils.setGoal(myself, "0","0","downDir")
		run itunibo.planner.moveUtils.doPlan(myself)
	}Goto executeMove
	
	State executeMove{
		solve(retract(move(M)))
		ifSolved {["CurMove = getCurSol(\"M\").toString()"]} else {["CurMove=\"nomove\""]}
		ifSolved {run itunibo.planner.moveUtils.execMove(myself, CurMove, FORWARDTIME)}
	}Goto executeMove if "(CurMove != \"nomove\")"else inRH
	
	State inRH{
		println("###BUTLER IN RH ")
		run itunibo.planner.moveUtils.saveMap(myself, mapName)
		["var mapString = itunibo.planner.plannerUtil.getMapOneLine2()
		  println(mapString)"]
		["emit(\"map\", \"map($mapString,$mapName)\" )"]
	}
}