/* Generated by AN DISI Unibo */ 
package it.unibo.roomexploration

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomexploration ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var RotationCount = 0;
			  var FORWARDTIME = 770;
			  var FORWARDTIME2 = 900;
			  var DimX = 0
			  var DimY = 0
			  var EdgeCounterX = 0
			  var EdgeCounterY = 0
			  var XRobot = 0
			  var YRobot = 0
			  var XRobotFT = 0
			  var YRobotFT = 0
		      var ContX = 0
			  var ContY = 0
			  var Obstaclelr = 0
			  var Obstacleup = 0
			  var Direction = ""
			  var mapName = "mappa"
			  var OBSTACLE = false
			  var explCompleted = false
			  var CurMove = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("###roomExploration started")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('moves.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="waitStart", cond=doswitch() )
				}	 
				state("waitStart") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="doExploration",cond=whenDispatch("startExploration"))
				}	 
				state("doExploration") { //this:State
					action { //it:State
						forward("isObstacle", "isObstacle" ,"mind" ) 
						itunibo.planner.moveUtils.testFunction(myself)
					}
					 transition(edgeName="t01",targetState="wallFound",cond=whenDispatch("obstacle"))
					transition(edgeName="t02",targetState="moveAhead",cond=whenDispatch("notObstacle"))
				}	 
				state("wallFound") { //this:State
					action { //it:State
						println("###MURO TROVATO")
						itunibo.planner.plannerUtil.wallFound(  )
						itunibo.planner.moveUtils.rotateLeft(myself)
						RotationCount ++
						println("###Rotation Count = $RotationCount")
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="endBoundary", cond=doswitchGuarded({(RotationCount >= 4) }) )
					transition( edgeName="goto",targetState="doExploration", cond=doswitchGuarded({! (RotationCount >= 4) }) )
				}	 
				state("moveAhead") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME )
					}
					 transition( edgeName="goto",targetState="doExploration", cond=doswitch() )
				}	 
				state("endBoundary") { //this:State
					action { //it:State
						println("###BoundaryExplored")
						DimX = itunibo.planner.moveUtils.getMapDimX( ) 
						          DimY = itunibo.planner.moveUtils.getMapDimY( )
								  println("DimX : $DimX")
								  println("DimY : $DimY")
						itunibo.planner.moveUtils.saveMap(myself ,mapName )
					}
					 transition( edgeName="goto",targetState="exploreRoom", cond=doswitch() )
				}	 
				state("exploreRoom") { //this:State
					action { //it:State
						XRobot = itunibo.planner.moveUtils.getPosX(myself)
								  YRobot = itunibo.planner.moveUtils.getPosY(myself)
								  println("Xrobot : $XRobot")
								  println("Yrobot : $YRobot")
						DimX = itunibo.planner.moveUtils.getMapDimX( ) 
						          DimY = itunibo.planner.moveUtils.getMapDimY( )
								  println("DimX : $DimX")
								  println("DimY : $DimY")
						if(((XRobot == DimX - 2) && (YRobot == DimY -2)) || ((XRobot == 0) && (YRobot == DimY -2))){ println("###IN FINE")
						forward("terminated", "terminated" ,"roomexploration" ) 
						 }
						else
						 { if((XRobot == 0) && (YRobot == 0)){ println("###IN 00")
						 itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						 itunibo.planner.moveUtils.rotateLeft2(myself)
						  }
						 else
						  { if((XRobot == 0) && (YRobot > 0)){ ContY = 0
						  println("###IN 0>")
						  itunibo.planner.moveUtils.rotateLeft(myself)
						  itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						  itunibo.planner.moveUtils.rotateLeft(myself)
						   }
						  else
						   { if((XRobot == DimX - 2) && (YRobot > 0)){ ContY = 0
						   println("###-2>")
						   itunibo.planner.moveUtils.rotateRight(myself)
						   itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						   itunibo.planner.moveUtils.rotateRight(myself)
						    }
						    }
						   }
						 forward("isObstacle", "isObsacle" ,"mind" ) 
						 itunibo.planner.moveUtils.testFunctionRightDir(myself)
						  }
					}
					 transition(edgeName="t03",targetState="explorationDone",cond=whenDispatch("terminated"))
					transition(edgeName="t04",targetState="tableFound",cond=whenDispatch("obstacle"))
					transition(edgeName="t05",targetState="moveAhead2",cond=whenDispatch("notObstacle"))
				}	 
				state("tableFound") { //this:State
					action { //it:State
						Direction = itunibo.planner.moveUtils.getDirection(myself)
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						XRobotFT = itunibo.planner.plannerUtil.getPosX()
								  YRobotFT = itunibo.planner.plannerUtil.getPosY()
					}
					 transition( edgeName="goto",targetState="leftDir", cond=doswitchGuarded({Direction.equals("leftDir")}) )
					transition( edgeName="goto",targetState="rightDir", cond=doswitchGuarded({! Direction.equals("leftDir")}) )
				}	 
				state("moveAhead2") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME )
					}
					 transition( edgeName="goto",targetState="exploreRoom", cond=doswitch() )
				}	 
				state("rightDir") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
						itunibo.planner.moveUtils.rotateRight2(myself)
						itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						itunibo.planner.moveUtils.rotateLeft(myself)
						forward("isObstacle", "isObstacle" ,"mind" ) 
						itunibo.planner.moveUtils.testFunctionRightDir(myself)
					}
					 transition(edgeName="t06",targetState="rightDir",cond=whenDispatch("obstacle"))
					transition(edgeName="t07",targetState="underTableRd",cond=whenDispatch("notObstacle"))
				}	 
				state("leftDir") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
						itunibo.planner.moveUtils.rotateLeft2(myself)
						itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						itunibo.planner.moveUtils.rotateRight(myself)
						forward("isObstacle", "isObstacle" ,"mind" ) 
					}
					 transition(edgeName="t08",targetState="leftDir",cond=whenDispatch("obstacle"))
					transition(edgeName="t09",targetState="underTableLd",cond=whenDispatch("notObstacle"))
				}	 
				state("underTableLd") { //this:State
					action { //it:State
						XRobot = itunibo.planner.plannerUtil.getPosX()
								  YRobot = itunibo.planner.plannerUtil.getPosY()
						if((XRobot == XRobotFT) && (YRobot == YRobotFT) ){ println("###FINITO")
						forward("terminated", "terminated" ,"roomexploration" ) 
						 }
						else
						 { itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						 itunibo.planner.moveUtils.rotateRight2(myself)
						 forward("isObstacle", "isObstacle" ,"mind" ) 
						  }
					}
					 transition(edgeName="t010",targetState="explorationDone",cond=whenDispatch("terminated"))
					transition(edgeName="t011",targetState="continueExplLD",cond=whenDispatch("obstacle"))
					transition(edgeName="t012",targetState="underTableLd",cond=whenDispatch("notObstacle"))
				}	 
				state("underTableRd") { //this:State
					action { //it:State
						XRobot = itunibo.planner.plannerUtil.getPosX()
								  YRobot = itunibo.planner.plannerUtil.getPosY()
						if((XRobot == XRobotFT) && (YRobot == YRobotFT) ){ println("###FINITO")
						forward("terminated", "terminated" ,"roomexploration" ) 
						 }
						else
						 { itunibo.planner.moveUtils.moveAhead(myself ,FORWARDTIME2 )
						 itunibo.planner.moveUtils.rotateLeft2(myself)
						 forward("isObstacle", "isObstacle" ,"mind" ) 
						 itunibo.planner.moveUtils.testFunctionRightDir(myself)
						  }
					}
					 transition(edgeName="t013",targetState="explorationDone",cond=whenDispatch("terminated"))
					transition(edgeName="t014",targetState="continueExplRD",cond=whenDispatch("obstacle"))
					transition(edgeName="t015",targetState="underTableRd",cond=whenDispatch("notObstacle"))
				}	 
				state("continueExplRD") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
						itunibo.planner.moveUtils.rotateRight(myself)
					}
					 transition( edgeName="goto",targetState="underTableRd", cond=doswitch() )
				}	 
				state("continueExplLD") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
						itunibo.planner.moveUtils.rotateLeft(myself)
					}
					 transition( edgeName="goto",targetState="underTableLd", cond=doswitch() )
				}	 
				state("explorationDone") { //this:State
					action { //it:State
						println("###EXPLORATION DONE###")
						itunibo.planner.moveUtils.setGoal(myself ,"0", "0" )
						itunibo.planner.moveUtils.doPlan(myself)
					}
					 transition( edgeName="goto",targetState="executeMove", cond=doswitch() )
				}	 
				state("executeMove") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { CurMove = getCurSol("M").toString()
						 }
						else
						{ CurMove="nomove"
						 }
						if(currentSolution.isSuccess()) { itunibo.planner.moveUtils.execMove(myself ,CurMove, FORWARDTIME )
						 }
					}
					 transition( edgeName="goto",targetState="executeMove", cond=doswitchGuarded({(CurMove != "nomove")}) )
					transition( edgeName="goto",targetState="inRH", cond=doswitchGuarded({! (CurMove != "nomove")}) )
				}	 
				state("inRH") { //this:State
					action { //it:State
						println("###BUTLER IN RH ")
						itunibo.planner.moveUtils.saveMap(myself ,mapName )
						var mapString = itunibo.planner.plannerUtil.getMapOneLine2()
								  println(mapString)
						emit("map", "map($mapString,$mapName)" )
					}
					 transition( edgeName="goto",targetState="finish", cond=doswitch() )
				}	 
				state("finish") { //this:State
					action { //it:State
					}
				}	 
			}
		}
}
