/* Generated by AN DISI Unibo */ 
package it.unibo.maitre

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitre ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("###Maitre STARTED")
					}
				}	 
				state("sendingP") { //this:State
					action { //it:State
						delay(2000) 
						println("----Maitre send prepare message")
						forward("prepare", "prepare" ,"butler" ) 
					}
					 transition( edgeName="goto",targetState="waitingPAck", cond=doswitch() )
				}	 
				state("waitingPAck") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("completedTask()"), Term.createTerm("completedTask(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Butler finito ${payloadArg(0)} task")
						}
					}
				}	 
				state("sendingAC") { //this:State
					action { //it:State
						forward("addFood", "addFood(2,2)" ,"butler" ) 
						forward("add", "add" ,"maitre" ) 
					}
					 transition(edgeName="t033",targetState="waitingAfAck",cond=whenDispatch("add"))
					transition(edgeName="t034",targetState="waitingClAck",cond=whenDispatch("cl"))
				}	 
				state("waitingAfAck") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t035",targetState="sendingAC",cond=whenDispatch("completedTask"))
					transition(edgeName="t036",targetState="updateFA",cond=whenDispatch("currentFood"))
				}	 
				state("waitingClAck") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t037",targetState="sendingP",cond=whenDispatch("completedTask"))
					transition(edgeName="t038",targetState="updateFC",cond=whenDispatch("currentFood"))
				}	 
				state("updateFP") { //this:State
					action { //it:State
					}
				}	 
				state("updateFC") { //this:State
					action { //it:State
					}
				}	 
				state("updateFA") { //this:State
					action { //it:State
					}
				}	 
			}
		}
}
