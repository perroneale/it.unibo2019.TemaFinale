/* Generated by AN DISI Unibo */ 
package it.unibo.butlermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butlermind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Task = ""
			  var table = 0
			  var inRh = false
			  var position = "rh"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('butlerMindKB.pl')","") //set resVar	
						println("ButlerMind STARTED")
					}
					 transition(edgeName="t07",targetState="updateKB",cond=whenDispatch("updateKBbm"))
				}	 
				state("waitCmd1") { //this:State
					action { //it:State
						forward("modelChangeTask", "modelChangeTask(robot,waiting,0,0)" ,"butlerresourcemodel" ) 
					}
					 transition(edgeName="t08",targetState="preparing",cond=whenEvent("modelChangedpreparing"))
				}	 
				state("updateKB") { //this:State
					action { //it:State
						println("###BUTLERMIND")
						if( checkMsgContent( Term.createTerm("updateKBbm(LIST)"), Term.createTerm("updateKBbm(LIST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("addTable(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="waitCmd1", cond=doswitch() )
				}	 
				state("preparing") { //this:State
					action { //it:State
						println("---BUTLERMIND in preparing")
						Task = "preparing";
						forward("calculateRoute", "calculateRoute(pantry)" ,"planningroute" ) 
						position = "pantry"
					}
					 transition(edgeName="t09",targetState="actionPrepare",cond=whenDispatch("destinationReached"))
				}	 
				state("actionPrepare") { //this:State
					action { //it:State
						println("###BUTLERMIND in actionPrepare")
						if( checkMsgContent( Term.createTerm("destinationReached(X,Y)"), Term.createTerm("destinationReached(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("getPosition(${payloadArg(0)},${payloadArg(1)},POSITION)","") //set resVar	
								position = getCurSol("POSITION").toString()
								println(position)
						}
						if(position == "pantry"){ forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						 }
						else
						 { if(position == "table" && table == 0){ forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
						 table++
						  }
						 else
						  { if(position == "fridge"){ forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						   }
						  else
						   { if(position == "table" && table == 1){ forward("calculateRoute", "calculateRoute(rh)" ,"planningroute" ) 
						   table = 0
						    }
						   else
						    { if(position == "rh"){ forward("completedTask", "completedTask($Task)" ,"maitre" ) 
						    forward("completedTask", "completedTask" ,"butlermind" ) 
						     }
						     }
						    }
						   }
						  }
					}
					 transition(edgeName="t010",targetState="actionPrepare",cond=whenDispatch("destinationReached"))
					transition(edgeName="t011",targetState="waitCmd2",cond=whenDispatch("completedTask"))
				}	 
				state("waitCmd2") { //this:State
					action { //it:State
						Task = ""
								  inRh = false
						println("###IN waitCmd2")
					}
					 transition(edgeName="t012",targetState="adding",cond=whenEvent("modelChangedadding"))
					transition(edgeName="t013",targetState="cleaning",cond=whenEvent("modelChangedcleaning"))
				}	 
				state("cleaning") { //this:State
					action { //it:State
						Task = "cleaning";
						forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						position = "table"
					}
					 transition(edgeName="t014",targetState="actionClean",cond=whenDispatch("destinationReached"))
				}	 
				state("actionClean") { //this:State
					action { //it:State
						println("###BUTLERMIND in actionCleaning")
						if( checkMsgContent( Term.createTerm("destinationReached(X,Y)"), Term.createTerm("destinationReached(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("getPosition(${payloadArg(0)},${payloadArg(1)},POSITION)","") //set resVar	
								position = getCurSol("POSITION").toString()
								println(position)
						}
						if(position == "dishwasher"){ forward("calculateRoute", "calculateRoute(rh)" ,"planningroute" ) 
						 }
						else
						 { if(position == "table" && table == 0){ forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
						 table++
						  }
						 else
						  { if(position == "fridge"){ forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						   }
						  else
						   { if(position == "table" && table == 1){ forward("calculateRoute", "calculateRoute(dishwasher)" ,"planningroute" ) 
						   table = 0
						    }
						   else
						    { if(position == "rh"){ forward("completedTask", "completedTask($Task)" ,"maitre" ) 
						    forward("completedTask", "completedTask" ,"butlermind" ) 
						     }
						     }
						    }
						   }
						  }
					}
					 transition(edgeName="t015",targetState="actionClean",cond=whenDispatch("destinationReached"))
					transition(edgeName="t016",targetState="waitCmd1",cond=whenDispatch("completedTask"))
				}	 
				state("adding") { //this:State
					action { //it:State
						Task = "adding"
								  inRh = false
						if( checkMsgContent( Term.createTerm("addFood(C,Q)"), Term.createTerm("addFood(C,Q)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("foodAvailability", "foodAvailability(${payloadArg(0)},${payloadArg(1)})" ,"fridge" ) 
						}
					}
					 transition(edgeName="t017",targetState="nextStep",cond=whenDispatch("positiveResponse"))
					transition(edgeName="t018",targetState="sendWarning",cond=whenDispatch("negativeResponse"))
				}	 
				state("nextStep") { //this:State
					action { //it:State
						forward("calculateRoute", "calculateRoute(fridge)" ,"planningroute" ) 
					}
					 transition(edgeName="t019",targetState="actionAdd",cond=whenDispatch("destinationReached"))
				}	 
				state("actionAdd") { //this:State
					action { //it:State
						println("###BUTLERMIND in actionPrepare")
						if( checkMsgContent( Term.createTerm("destinationReached(X,Y)"), Term.createTerm("destinationReached(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("getPosition(${payloadArg(0)},${payloadArg(1)},POSITION)","") //set resVar	
								position = getCurSol("POSITION").toString()
								println(position)
						}
						if(position == "table"){ forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						 }
						if(position == "fridge"){ forward("calculateRoute", "calculateRoute(table)" ,"planningroute" ) 
						 }
						if(position == "rh"){ forward("completedTask", "completedTask()" ,"butlermind" ) 
						 }
					}
					 transition(edgeName="t020",targetState="actionClean",cond=whenDispatch("destinationReached"))
					transition(edgeName="t021",targetState="waitCmd2",cond=whenDispatch("completedTask"))
				}	 
				state("sendWarning") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("negativeResponse(C,Q,AQ)"), Term.createTerm("negativeResponse(C,Q,AQ)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("warning", "warning(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd2", cond=doswitch() )
				}	 
			}
		}
}
